upstream redis_cluster {
    server redis:6379;
}

server {

    listen 80; 
    server_name localhost;

    # Checar resolver da Amazon
    resolver 127.0.0.11;

location = /cached {
     set $key $request_uri;
     # Checar o tamanho maximo no ElastiCache
     content_by_lua_block {
         local redis = require "resty.redis"
         local red = redis:new()
	 local key = ngx.var.key;
	 if not key then
             ngx.log(ngx.ERR, "No key provided ", key)
             return ngx.exit(400)
 	 end 
         red:set_timeout(1000) -- 1 second
         local ok, err = red:connect("redis", 6379)
         if not ok then
             ngx.log(ngx.ERR, "failed to connect to redis: ", err)
             return ngx.exit(500)
         end
         local value, err = red:get(key)
         if not value then
             ngx.log(ngx.ERR, "failed to get redis key: ", err)
             return ngx.exit(500)
         elseif value == ngx.null then
             ngx.log(ngx.ERR, "No key found ", key)
             local response = ngx.location.capture(
                 '/backend', 
                 { method = ngx.HTTP_GET, always_forward_body = true, copy_all_vars = true }
             )
             ngx.status = response.status
             if response.body then
                 ngx.print(response.body)
             end
             red:init_pipeline()
             red:set(key, response.body)
             red:expire(key, 60)
             local results, err = red:commit_pipeline()
	     if not results then
                 ngx.log(ngx.ERR, "failed to connect to set redis key: ", err)
                return ngx.exit(500)
             end
         else
             ngx.print(value)
             return ngx.exit(200)
         end
         return ngx.exit(ngx.status)
     }
}

location = /backend {
     proxy_pass http://java:8080/docker-java-app/test;
}
}
